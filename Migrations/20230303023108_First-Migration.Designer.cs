// <auto-generated />
using System;
using BrewingData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace brewing.Migrations
{
    [DbContext(typeof(BrewingContext))]
    [Migration("20230303023108_First-Migration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("brewing.Models.FlavorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Flavor")
                        .HasColumnType("text");

                    b.Property<int?>("MaltId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MaltId");

                    b.ToTable("flavor_type");
                });

            modelBuilder.Entity("brewing.Models.GrainType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("grain_type");
                });

            modelBuilder.Entity("brewing.Models.Hop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("alphaAcid")
                        .HasColumnType("numeric");

                    b.Property<decimal>("betaAcid")
                        .HasColumnType("numeric");

                    b.Property<int>("internationalBitteringUnits")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("hops");
                });

            modelBuilder.Entity("brewing.Models.IngredientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ingredient_type");
                });

            modelBuilder.Entity("brewing.Models.Malt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DiastaticPower")
                        .HasColumnType("integer");

                    b.Property<decimal>("ExtractPercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("GrainTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("IngredientTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxGrainUsage")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GrainTypeId");

                    b.HasIndex("IngredientTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("malts");
                });

            modelBuilder.Entity("brewing.Models.MaltColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("malt_color");
                });

            modelBuilder.Entity("brewing.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("HopAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("MaltAmount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("YeastId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("YeastId");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("brewing.Models.Yeast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IngredientTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("MaxFermentationTemp")
                        .HasColumnType("double precision");

                    b.Property<double>("MinFermentationTemp")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("yeasts");
                });

            modelBuilder.Entity("brewing.Models.FlavorType", b =>
                {
                    b.HasOne("brewing.Models.Malt", null)
                        .WithMany("FlavorType")
                        .HasForeignKey("MaltId");
                });

            modelBuilder.Entity("brewing.Models.Hop", b =>
                {
                    b.HasOne("brewing.Models.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("brewing.Models.Recipe", null)
                        .WithMany("Hops")
                        .HasForeignKey("RecipeId");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("brewing.Models.Malt", b =>
                {
                    b.HasOne("brewing.Models.GrainType", "GrainType")
                        .WithMany()
                        .HasForeignKey("GrainTypeId");

                    b.HasOne("brewing.Models.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId");

                    b.HasOne("brewing.Models.Recipe", null)
                        .WithMany("Malts")
                        .HasForeignKey("RecipeId");

                    b.Navigation("GrainType");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("brewing.Models.Recipe", b =>
                {
                    b.HasOne("brewing.Models.Yeast", null)
                        .WithMany("Recipes")
                        .HasForeignKey("YeastId");
                });

            modelBuilder.Entity("brewing.Models.Yeast", b =>
                {
                    b.HasOne("brewing.Models.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId");

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("brewing.Models.Malt", b =>
                {
                    b.Navigation("FlavorType");
                });

            modelBuilder.Entity("brewing.Models.Recipe", b =>
                {
                    b.Navigation("Hops");

                    b.Navigation("Malts");
                });

            modelBuilder.Entity("brewing.Models.Yeast", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
